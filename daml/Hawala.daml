-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Hawala where

import Daml.Script
import qualified DA.Text as Text
import qualified DA.List as List
import DA.Optional

template HawalaAccount with
    owner: Party
    fee: Decimal
    observers: [Party]
  where
    signatory owner
    observer observers

    key owner: Party
    maintainer key

    choice UpdateFee: ContractId HawalaAccount
      with
        newFee: Decimal
      controller owner
      do
        create this with fee = newFee

template Iou with
    issuer: Party
    owner: Party
    amount: Decimal
  where
    signatory issuer, owner

    ensure (amount >= 0.0)

    choice Redeem: ()
      controller owner
      do
        return ()

template LockedIou with
    iou: Iou
    hash: Text
    link: Optional (ContractId LockedIou)
  where
    signatory iou.issuer
    observer iou.owner

    choice Unlock: ()
      with
        password: Text
      controller iou.owner
      do
        assertMsg "Invalid password" (Text.sha256 password == hash)

        create iou

        whenSome link $ \cid -> do
          create Reveal with
            owner = iou.issuer
            cid
            password
          return ()

        return ()

template TransferProposal with
    path: [Party] -- stored from last to origin
    destination: Party
    amount: Decimal
    hash: Text
    link: Optional (ContractId LockedIou)
  where
    -- 2nd element (the sender)
    signatory path List.!! 1
    -- last element (the origin), 1st element (the receiver), the destination
    observer List.last path, List.head path, destination

    ensure ((List.length path >= 2) && (List.unique path))

    choice AcceptAndForward: (ContractId TransferProposal, ContractId LockedIou)
      with
        next: Party
      controller List.head path -- receiver
      do
        assertMsg "Receiver is already in the chain" (notElem next path)

        let sender = List.head (List.tail path)
        let receiver = List.head path
        assertMsg "Receiver cannot be destination" (receiver /= destination)

        (_, account) <- fetchByKey @HawalaAccount receiver

        l <- create LockedIou with
          iou = Iou with
            issuer = sender
            owner = receiver
            amount
          hash
          link

        p <- create this with
          path = (next :: path)
          amount = amount * (1.0 - account.fee)
          link = Some l

        return (p, l)

    choice Accept: ContractId LockedIou
      controller List.head path -- receiver
      do
        let sender = List.head (List.tail path)
        let receiver = List.head path
        assertMsg "Receiver must be destination" (receiver == destination)

        create LockedIou with
          iou = Iou with issuer = sender; owner = receiver; amount
          hash
          link

template Reveal with
    owner: Party
    password: Text
    cid: ContractId LockedIou
  where
    signatory owner

    choice GetPassword: (ContractId LockedIou, Text)
      controller owner
      do
        return (cid, password)

test_simple_unlock = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"

  let password = "Abracadabra"
  let badPassword = "Open sesame"
  let hash = Text.sha256 password

  lockedIou <- submit alice do
    createCmd LockedIou with
      iou = Iou with issuer = alice; owner = bob; amount = 100.0
      hash = hash
      link = None

  -- Alice can't unlock with an incorrect password
  submitMustFail alice do
    exerciseCmd lockedIou Unlock with
      password = badPassword

  -- ... nor with the correct password
  submitMustFail alice do
    exerciseCmd lockedIou Unlock with
      password = password

  -- Bob can't unlock with an incorrect password
  submitMustFail bob do
    exerciseCmd lockedIou Unlock with
      password = badPassword

  -- ... but is successful with the right password
  submit bob do
    exerciseCmd lockedIou Unlock with
      password = password

test_full_transfer = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  hawaladar1 <- allocateParty "Hawaladar 1"
  hawaladar2 <- allocateParty "Hawaladar 2"

  let users = [alice, bob, hawaladar1, hawaladar2]

  submit hawaladar1 do createCmd HawalaAccount with owner = hawaladar1; fee = 0.03; observers = users
  submit hawaladar2 do createCmd HawalaAccount with owner = hawaladar2; fee = 0.05; observers = users

  let password = "Abracadabra"
  let amount = 100.0

  tp <- submit alice do
    createCmd TransferProposal with
      path = [hawaladar1, alice]
      destination = bob
      amount = 100.0
      hash = Text.sha256 "Abracadabra"
      link = None

  -- Hawaladar1 cannot exercise the final accept because he is not the final destination
  submitMustFail hawaladar1 do
    exerciseCmd tp Accept

  (tp, l1) <- submit hawaladar1 do
    exerciseCmd tp AcceptAndForward with next = hawaladar2
  (tp, l2) <- submit hawaladar2 do
    exerciseCmd tp AcceptAndForward with next = bob

  -- Bob cannot accept and forward because he is the final destination
  submitMustFail bob do
    exerciseCmd tp AcceptAndForward with next = bob

  l3 <- submit bob do
    exerciseCmd tp Accept

  submit bob do
    exerciseCmd l3 Unlock with
      password = password

  h2_reveals <- query @Reveal hawaladar2
  let (h2_revid, _) = List.head h2_reveals
  (cid, h2_pw) <- submit hawaladar2 do
    exerciseCmd h2_revid GetPassword
  
  assertMsg "Incorrect LockedIou CID" (cid == l2)
  submit hawaladar2 do
    exerciseCmd l2 Unlock with
      password = h2_pw

  h1_reveals <- query @Reveal hawaladar1
  let (h1_revid, _) = List.head h1_reveals
  (cid, h1_pw) <- submit hawaladar1 do
    exerciseCmd h1_revid GetPassword
  
  assertMsg "Incorrect LockedIou CID" (cid == l1)
  submit hawaladar1 do
    exerciseCmd l1 Unlock with
      password = h1_pw

  bob_ious <- query @Iou bob
  assertMsg "Incorrect number of IOUs created for Bob" (length bob_ious == 1)
  let (_, bobIou) = List.head bob_ious

  fees <- query @HawalaAccount bob
  let expectedAmount = amount * foldl (\acc v -> acc * (1.0 - v.fee)) 1.0 (map snd fees)
  assertMsg "Incorrect value for Bob's IOU" (bobIou.amount == expectedAmount)

  return ()
